name: TaskKernel
stationary: false
params: [num_tasks]

doc: |
  TaskKernel

reparams: |
#update_cov_
  Eigen::MatrixXd L = Eigen::MatrixXd::Zero(num_tasks, num_tasks);
  

value: |
  return cov_((int)x1, (int)x2)

grad:
    log_a:  return exp(log_a);
    log_b:  return x1 * x2 * exp(log_b);
    x1: return x2 * exp(log_b);
    x2: return x1 * exp(log_b);



class TaskKernel : public Kernel{
public:
    TaskKernel( const unsigned int ndim, const unsigned int dim, const unsigned int num_tasks): Kernel(ndim), dim_(dim), num_tasks_(num_tasks), vector_((num_tasks*(num_tasks+1))/2, 0), cov_(num_tasks, num_tasks) {};

    double value (const double* x1, const double *x2) const{

        return(cov_(int(x1[dim_]), int(x2[dim_])));
    };

  void update_cov_(){
    Eigen::MatrixXd L =  Eigen::MatrixXd::Zero(num_tasks_, num_tasks_);
    
    int row=0, col=0;
    
    for (int i = 0; i < vector_.size(); ++i){
      L(row,col) = vector_[i];
      ++row;
      
      if (row == num_tasks_){
        ++col;
        row = col;
      }
    }
    cov_ = (L * (L.transpose()));
  }

   // Parameter vector spec.
    unsigned int size () const { return vector_.size(); };
    void set_parameter (const unsigned int i, const double value) {
        vector_[i] = value;
    update_cov_();
    };
    double get_parameter (const unsigned int i) const {
        return vector_[i];
    };


private:
    unsigned int dim_;
    unsigned int num_tasks_;
    vector<double> vector_;
    Eigen::MatrixXd cov_;
};